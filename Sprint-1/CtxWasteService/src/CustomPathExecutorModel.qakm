QActor custompathexecutor context ctxwasteservice {
	[# 
		val name = "CustomPathExecutor"
		val version = "1"
		
		
		var Pos = 0
		var PosToGo = 0
		
//		enum class positions(val v : String) = {home(0), indoor(1), plasticbox(2), glassbox(3)}
		
//		enum class routes(val v : Int) = {
//			HI(1),
//			IP(1),
//			IG(2),
//			PI(-1),
//			GI(-2),
//			PH(2),
//			GH(1)
//		}
		
		var stepToDo = 0
		var pathToDo = ""
		var pathStep = 0
		var pathLenght = -1
		var turnBack = false
		
		val IncPosPath = "wl"
		val DecPosPath = "lwrr"
		val goBackPath = "hllwrr"
		val goBackPath2 = "hllwrrr" 
	#]
	
	
	
	State s0 initial{
		println("\t $name: Started! $version") color blue
	}
	Goto waiting
	
	State waiting {
		println("\t $name: waiting for move requests!")
	}
	Transition t0 whenRequest move -> handleMoveRequest
	
	
	State handleMoveRequest {
		onMsg(move : move(Pos, NewPos)){
			[# 
				val NewPos = payloadArg(1)
				pathStep = 0
			#]
			if[# NewPos == "home" #]{
				[# PosToGo = 0 #]
			}
			if[# NewPos == "indoor" #]{
				[# PosToGo = 1 #]
			}
			if[# NewPos == "plasticbox" #]{
				[# PosToGo = 2 #]
			}
			if[# NewPos == "glassbox" #]{
				[# PosToGo = 3 #]
			}
			println("\t $name: doing move($Pos, $NewPos)")
		}
		
		[# 
			stepToDo = PosToGo - Pos 
			if(stepToDo <= -3 ){
				stepToDo += 4
			}else if(stepToDo >= 3){
				stepToDo += -4
			}
		#]
		
		println("\t $name: stepToDo=$stepToDo")
	}
	Goto working
	
	
	State working {
		[# pathStep = 0 
			var backPath = ""
		#]
		
		if[# stepToDo > 0 #]{
			[# pathToDo = IncPosPath 
				backPath = goBackPath
			#]
		}
		if[# stepToDo < 0 #]{
			[# pathToDo = DecPosPath 
				backPath = goBackPath2
			#]
		}
		
		if[# turnBack #]{
			[# pathToDo = backPath.plus(pathToDo) #]
		}
		
		[# pathLenght = pathToDo.lastIndex #]
	}
	Goto execStep if[# stepToDo != 0 #] else pathDone
					
					
					
					
	State execStep {
		onMsg(toggleStop : toggleStop(ARG)){
			//REPLY Inutile
			//replyTo stopReq with stopRepl : stopRepl(Resumed)
			println("\t $name: RESUMED!")
		}
		
		onMsg(coapUpdate : coapUpdate(RESOURCE, VALUE)){
			[#
				val Resource = payloadArg(0)
				val Value = payloadArg(1)
				if(Value.contains("obstacle") && pathToDo.get(pathStep) == 'w'){
					pathStep++
				}
			#]
			println("\t $name: coapUpdate($Resource, $Value)")
		}
		if[# pathStep <= pathLenght #]{
			[#
				val CMD = pathToDo.get(pathStep)
			#]
			println("\t $name: Forwarding to BasicRobot cmd($CMD)")
			if[# CMD == 'w' #]{
				forward basicrobot -m cmd : cmd($CMD)
			}
			if[# CMD == 'l' || CMD == 'r' || CMD == 'h' #]{
				forward basicrobot -m cmd : cmd($CMD)
				delay 1000
				[# pathStep++ #]
			}
		}else{
			forward custompathexecutor -m coapUpdate : coapUpdate(custompathexecutor, stepDone)
		}
	
	}
	Transition t1 	whenTime 1200 -> execStep
					whenMsg coapUpdate and [# pathStep <= pathLenght #] -> execStep 
					whenMsg coapUpdate and [# pathStep > pathLenght #] 	-> stepDone
					//whenRequest move -> handleMoveRequestInMovement
					whenMsg toggleStop -> stopped
					
	
	
	State stepDone {
		onMsg(coapUpdate : coapUpdate(RESOURCE, VALUE)){
			
			
			if[# stepToDo > 0 && !turnBack #]{
				[# 
					stepToDo-- 
					Pos = (Pos+1)%4
				#]
			}
			if[# stepToDo < 0  && !turnBack #]{
				[# 
					stepToDo++ 
					Pos = (Pos-1)%4
				#]
			}
			if[# turnBack #]{
				[# turnBack = false #]
				println("\t $name: Turned Back! - Pos: $Pos")
			}
			
			println("\t $name: StepDone! - Pos: $Pos")
			emit posEvent : posEvent($Pos)
			
		}
	}
	Transition t2 	whenTime 100 -> working
					whenRequest move -> handleMoveRequest
	
	
	State pathDone {
		println("\t $name: Path done in $Pos")
		replyTo move with moveDone : moveDone($Pos) caller==transporttrolley
	}
	Goto waiting
	
	State stopped {
		onMsg(toggleStop : toggleStop(ARG)){
			//REPLY Inutile
			//replyTo stopReq with stopRepl : stopRepl(Stopped)
			forward basicrobot -m cmd : cmd(h)
			delay 100
			println("\t $name: STOPPED!")
		}
	}
	Transition t3 	whenMsg toggleStop -> execStep
	
	
	//Optional implementation
	State handleMoveRequestInMovement {
		//Attahc to path the normal path, the go back path
		[# turnBack = true #]
	}
	Goto handleMoveRequest
	
}