/* Generated by AN DISI Unibo */ 
package it.unibo.custompathexecutor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Custompathexecutor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				val name = "CustomPathExecutor"
				val version = "1"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("	 $name: Started! $version")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outblack("	 $name: waiting for move requests!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleMoveRequest",cond=whenRequest("move"))
				}	 
				state("handleMoveRequest") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("move(CurrentPos,NewPos)"), Term.createTerm("move(Pos,NewPos)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Pos = payloadArg(0)
												val NewPos = payloadArg(1) 
								CommUtils.outblack("	 $name: doing move($Pos, $NewPos)")
								delay(10000) 
								answer("move", "moveDone", "moveDone($NewPos)","transporttrolley"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
