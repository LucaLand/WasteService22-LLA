System depositrequesthandler
	Request wasteDeposit : wasteDeposit(ID, Type, TruckLoad)
	Reply loadaccept : loadaccept(ID)
	Reply loadrejecetd : loadrejecetd(ID)
	
	Dispatch pickupOk : pickupOk(ID)
	

Context ctxsmartdevice ip[host="127.0.0.1" port=8074]
Context ctxwasteservice ip[host="localhost" port=8072]

ExternalQActor smartdevice context ctxsmartdevice

QActor depositrequesthandler context ctxwasteservice{
	[# 	var accepted = false; 
		val name = "RequestHandler"
		
		//Only one Request at time
		var ID = ""
		var T = ""
		var L = ""
	#]
	State s0 initial {
		println("$name Started!")
	}
	Goto waiting
	
	State waiting{
		//printCurrentMessage
		println("$name ready and waiting for deposit request...")
	}
	Transition t0 whenRequest wasteDeposit -> requestHandling //Usare la guardia per farlon andare in due stati separati (accettata/rifiutata)
	
	State requestHandling {
		//printCurrentMessage
		println("$name: Request arrived!")
		[# accepted = false #]

		onMsg(wasteDeposit : wasteDeposit(ID, T, L)){
			[# 	ID = payloadArg(0)
				T = payloadArg(1)
				L = payloadArg(2)
			#]
			println("Request: ($ID, $T, $L)")
			if[# ID.toInt()%2 == 0 #]{			//If di esempio test per avere risposte alternate
				[# accepted = true #]
			}else{
				[# accepted = false #]
			}
		}
	}
	Goto requestAccepted if[# accepted == true #] else requestRejected 
	
	State requestAccepted {
		replyTo wasteDeposit with loadaccept : loadaccept($ID)
		println("Request -$ID- Accepted!")
	}
	Goto pickingUp
	
	State requestRejected {
		replyTo wasteDeposit with loadrejecetd : loadrejecetd($ID)
		println("Request -$ID- Refused!")
	}
	Goto waiting
	
	State pickingUp {
		//printCurrentMessage
		println("Started pickingUp...")
		delay 3000
		println("...finished pickingUp")
		forward smartdevice -m pickupOk : pickupOk($ID)
	}
	Goto waiting
}
