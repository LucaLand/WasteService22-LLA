/* Generated by AN DISI Unibo */ 
package it.unibo.ledactor

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Ledactor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val name = "LedActor"
				val version = "V1.0"
				
				var ledState = "off"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("	 $name: Started! $version")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="handleRobotStateEvent", cond=doswitch() )
				}	 
				state("handleRobotStateEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("robotStateEvent(STATE)"), Term.createTerm("robotStateEvent(STATE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outred("	 $name: Handling RobotStateEvent change!")
								  
												val robotState = payloadArg(0)
								if(  robotState == "atHome"  
								 ){ ledState = "off"  
								}
								if(  robotState == "moving"  
								 ){ ledState = "blinking"  
								}
								if(  robotState == "stopped"  
								 ){ ledState = "on"  
								}
						}
						CommUtils.outred("	 $name: Led state- $ledState")
						updateResourceRep( ledState  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_handleRobotStateEvent", 
				 	 					  scope, context!!, "local_tout_ledactor_handleRobotStateEvent", 5000.toLong() )
					}	 	 
					 transition(edgeName="t012",targetState="handleRobotStateEvent",cond=whenTimeout("local_tout_ledactor_handleRobotStateEvent"))   
					transition(edgeName="t013",targetState="handleRobotStateEvent",cond=whenEvent("robotStateEvent"))
				}	 
			}
		}
}
