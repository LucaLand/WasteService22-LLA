/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 	
				val name = "WasteService"
				val version = "0"
				
				//Only one Request at time
				var accepted = false; 
				var ID = "0"
				var T = ""
				var L = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Started! $version")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: ready and waiting for deposit request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="requestHandling",cond=whenRequest("depositRequest"))
				}	 
				state("requestHandling") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Deposit Request arrived!")
						 accepted = false  
						if( checkMsgContent( Term.createTerm("depositRequest(ID,Type,TruckLoad)"), Term.createTerm("depositRequest(ID,T,L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	ID = payloadArg(0)
												T = payloadArg(1)
												L = payloadArg(2)
								if(  ID.toInt()%2 == 0  
								 ){ accepted = true  
								}
								else
								 { accepted = false  
								 }
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickingUp", cond=doswitchGuarded({ accepted == true  
					}) )
					transition( edgeName="goto",targetState="requestRejected", cond=doswitchGuarded({! ( accepted == true  
					) }) )
				}	 
				state("requestRejected") { //this:State
					action { //it:State
						answer("depositRequest", "loadrejecetd", "loadrejecetd($ID)"   )  
						CommUtils.outgreen("	 $name: Request -$ID- Refused!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("pickingUp") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Request -$ID- Accepted!")
						CommUtils.outgreen("	 $name: Requesting pickingUp...")
						delay(7000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickupOk", cond=doswitch() )
				}	 
				state("pickupOk") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: PickupOK received! Finished ${payloadArg(0)}")
						answer("depositRequest", "loadaccept", "loadaccept($ID)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
