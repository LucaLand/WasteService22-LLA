/* Generated by AN DISI Unibo */ 
package it.unibo.depositrequesthandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Depositrequesthandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var accepted = false; 
				val name = "RequestHandler"
				
				var T = ""
				var ID = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("	 $name: Started!")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("	 $name: ready and waiting for deposit request...")
						stateTimer = TimerActor("timer_waiting", 
							scope, context!!, "local_tout_depositrequesthandler_waiting", 7000.toLong() )
					}
					 transition(edgeName="t01",targetState="requestHandling",cond=whenTimeout("local_tout_depositrequesthandler_waiting"))   
				}	 
				state("requestHandling") { //this:State
					action { //it:State
						println("	 $name: Deposit Request arrived!")
						 
									accepted = false 
									ID++
						if(  ID.toInt()%2 == 0  
						 ){ 
											accepted = true 
											T = "plastic"
						}
						else
						 { 
						 					accepted = true 
						 					T = "glass"
						 }
					}
					 transition( edgeName="goto",targetState="requestAccepted", cond=doswitchGuarded({ accepted == true  
					}) )
					transition( edgeName="goto",targetState="requestRejected", cond=doswitchGuarded({! ( accepted == true  
					) }) )
				}	 
				state("requestAccepted") { //this:State
					action { //it:State
						println("	 $name: Request -$ID- Accepted!")
					}
					 transition( edgeName="goto",targetState="pickingUp", cond=doswitch() )
				}	 
				state("requestRejected") { //this:State
					action { //it:State
						println("	 $name: Request -$ID- Refused!")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("pickingUp") { //this:State
					action { //it:State
						println("	 $name: Requesting pickingUp...")
						request("pickupReq", "pickupReq($ID,$T)" ,"transporttrolley" )  
					}
					 transition(edgeName="t12",targetState="waiting",cond=whenReply("pickupOk"))
				}	 
				state("pickupOk") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickupOk(ID)"), Term.createTerm("pickupOk(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("	 $name: PickupOK received! Finished ${payloadArg(0)}")
						}
					}
				}	 
			}
		}
}
