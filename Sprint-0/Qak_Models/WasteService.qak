System wasteservice


	//To TransportTrolley
	Request pickupReq : pickupReq(ID, T)	//Richiesta di pickup di un relativo materiale
	Reply pickupOk : pickupOk(ID)			//Risposta di fine pickup, relativa ad una richiesta
	
	
	//Request Handler
	Request depositRequest : depositRequest(ID, Type, TruckLoad)
	Reply loadaccept : loadaccept(ID)
	Reply loadrejecetd : loadrejecetd(ID)


Context ctxwasteservice ip[host="loaclhost" port=8072]


QActor wasteservice context ctxwasteservice{
	[#
		val name = "WasteService"
		val version = "0"

		//Only one Request at time
		var accepted = false;
		var ID = "0"
		var T = ""
		var L = ""
	#]

	State s0 initial {
		println("\t $name: Started! $version") color green
	}
	Goto waiting

	State waiting{
		println("\t $name: ready and waiting for deposit request...") color green
	}
	Transition t0 whenRequest depositRequest -> requestHandling

	State requestHandling {
		println("\t $name: Deposit Request arrived!") color green
		[# accepted = false #]

		onMsg(depositRequest : depositRequest(ID, T, L)){
			[# 	ID = payloadArg(0)
				T = payloadArg(1)
				L = payloadArg(2)
			#]
			println("Request: ($ID, $T, $L)") color green
			if[# ID.toInt()%2 == 0 #]{			//If di esempio test per avere risposte alternate
				[# accepted = true #]
			}else{
				[# accepted = false #]
			}
		}
	}
	Goto pickingUp if[# accepted == true #] else requestRejected

	State requestRejected {
		replyTo depositRequest with loadrejecetd : loadrejecetd($ID)
		println("\t $name: Request -$ID- Refused!") color green
	}
	Goto waiting

	State pickingUp {
		println("\t $name: Request -$ID- Accepted!") color green
		println("\t $name: Requesting pickingUp...") color green
		//request transporttrolley -m pickupReq : pickupReq($ID, $T)
	}
	Transition t1 whenReply pickupOk -> pickupOk

	State pickupOk {
		onMsg(pickupOk : pickupOk(ID)){
			println("\t $name: PickupOK received! Finished ${payloadArg(0)}") color green
			replyTo depositRequest with loadaccept : loadaccept($ID)
		}
	}
	Goto waiting
}