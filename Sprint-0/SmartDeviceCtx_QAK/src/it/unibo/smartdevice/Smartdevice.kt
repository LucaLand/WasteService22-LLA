/* Generated by AN DISI Unibo */ 
package it.unibo.smartdevice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Smartdevice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var request_ID = 0  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("SmartDevice Started!")
					}
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						println("Smart Device Waiting for Truck...")
						 request_ID ++  
						stateTimer = TimerActor("timer_idle", 
							scope, context!!, "local_tout_smartdevice_idle", 10000.toLong() )
					}
					 transition(edgeName="t00",targetState="truckArrived",cond=whenTimeout("local_tout_smartdevice_idle"))   
				}	 
				state("truckArrived") { //this:State
					action { //it:State
						println("Truck Arrived!")
						println("Sending request -$request_ID- :")
						 val ID = request_ID  
						request("wasteDeposit", "wasteDeposit($ID,0,10)" ,"depositrequesthandler" )  
						stateTimer = TimerActor("timer_truckArrived", 
							scope, context!!, "local_tout_smartdevice_truckArrived", 10000.toLong() )
					}
					 transition(edgeName="t11",targetState="truckArrived",cond=whenTimeout("local_tout_smartdevice_truckArrived"))   
					transition(edgeName="t12",targetState="waitPickUp",cond=whenReply("loadaccept"))
					transition(edgeName="t13",targetState="truckGoAway",cond=whenReply("loadrejecetd"))
				}	 
				state("waitPickUp") { //this:State
					action { //it:State
						println("Load Accepted -$request_ID- : waiting pickUp")
					}
					 transition(edgeName="t24",targetState="truckGoAway",cond=whenDispatch("pickupOk"))
				}	 
				state("truckGoAway") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("loadrejecetd(ID)"), Term.createTerm("loadrejecetd(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Carico -${payloadArg(0)}- Rifiutato!")
						}
						if( checkMsgContent( Term.createTerm("pickupOk(ID)"), Term.createTerm("pickupOk(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("Scarico -${payloadArg(0)}- Completato!")
						}
						println("Il Truck pu√≤ andare!")
						stateTimer = TimerActor("timer_truckGoAway", 
							scope, context!!, "local_tout_smartdevice_truckGoAway", 3000.toLong() )
					}
					 transition(edgeName="t35",targetState="idle",cond=whenTimeout("local_tout_smartdevice_truckGoAway"))   
				}	 
			}
		}
}
