System wasteservicegui

	Event robotPosition : robotPosition(POS)	//POS: H, I, PB, GB		(from TransportTrolleyActor)
	Event currentWeight : currentWeight(TYPE, WEIGHT)	//TYPE: plastic, glass -- WEIGHT: float		(from handleRequestActor)
	Event ledState : ledState(STATE)	//STATE: off, on, blink		(from LedActor)
	

Context ctxwasteservicegui ip[host="localhost" port=8078]

QActor wasteservicegui context ctxwasteservicegui {
	[#
		val name = "WasteServiceGui"
		val version = "V4.0"
		
		var robotPos = "null";
		var currentPB = "null";
		var currentGB = "null";
		var ledState = "null";	
		
	#]
	
	
	State s0 initial{
		println("\t $name Started! ($version)")		
	}
	Goto watching
	
	
	State watching {
		println("\t $name - Info")
		println("\t\t -RobotPos: $robotPos")
		println("\t\t -CurrentPB: $currentPB")
		println("\t\t -CurrentGB: $currentGB")
		println("\t\t -LedState: $ledState")
		println("\t Info Finish - Watching...")
		println("")
	}
	Transition t0 	whenEvent robotPosition -> handleEvents
					whenEvent currentWeight -> handleEvents
					whenEvent ledState -> handleEvents
	
	
	State handleEvents {
		//Handle different events
		
		//RobotPosition
		onMsg(robotPosition : robotPosition(POS)){
			println("\t $name: Updating RobotPosition to ${payloadArg(0)}")
			[# robotPos = payloadArg(0) #]
		}
		
		//CurrentWeight
		onMsg(currentWeight : currentWeight(TYPE, WEIGHT)){
			println("\t $name: Updating Current Weight of Box[${payloadArg(0)}] to ${payloadArg(1)}kg")
			
			if[# payloadArg(0) == "plastic" #]{
				[# currentPB = payloadArg(1) #]
			}
			if[# payloadArg(0) == "glass" #]{
				[# currentGB = payloadArg(1) #]
			}
		}
		
		//LedState
		onMsg(ledState : ledState(STATE)){
			println("\t $name: Updating LedState to ${payloadArg(0)}")
			[# ledState = payloadArg(0) #]
		}
		
		
	}
	Goto watching
	
	
}