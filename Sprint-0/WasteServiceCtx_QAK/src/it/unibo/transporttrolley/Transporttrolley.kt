/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				val name = "TransportTrolley"
				val version = "V3.3"
				
				var materialType = ""
				var pos = "H"		//Added V3.3 - pos : "H, I, PB, GB" Presuming starts from Home	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("	 $name: Started! $version")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						 pos = "H"  
						println("	 $name: TransportTrolley at Home!")
						emit("robotAtHome", "robotAtHome(1)" ) 
						println("	 $name: ready and waiting for pickupRequest!")
					}
					 transition(edgeName="t02",targetState="pickup",cond=whenRequest("pickupReq"))
				}	 
				state("pickup") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickupReq(ID,T)"), Term.createTerm("pickupReq(ID,T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	
												val ID = payloadArg(0)
												materialType = payloadArg(1)
								println("	 $name: pickupRequest($ID) received!")
								println("	 $name: Robot going from $pos to Indoor")
								emit("robotMoving", "robotMoving(2)" ) 
								delay(10000) 
								 pos = "I"  
								println("	 $name: PickupOK!")
								answer("pickupReq", "pickupOk", "pickupOk($ID)"   )  
						}
					}
					 transition( edgeName="goto",targetState="depositPlastic", cond=doswitchGuarded({ materialType == "plastic"  
					}) )
					transition( edgeName="goto",targetState="depositGlass", cond=doswitchGuarded({! ( materialType == "plastic"  
					) }) )
				}	 
				state("depositPlastic") { //this:State
					action { //it:State
						println("	 $name: Depositing plastic!")
						delay(7000) 
						 pos = "PB"  
						stateTimer = TimerActor("timer_depositPlastic", 
							scope, context!!, "local_tout_transporttrolley_depositPlastic", 100.toLong() )
					}
					 transition(edgeName="t13",targetState="goHome",cond=whenTimeout("local_tout_transporttrolley_depositPlastic"))   
					transition(edgeName="t14",targetState="pickup",cond=whenRequest("pickupReq"))
				}	 
				state("depositGlass") { //this:State
					action { //it:State
						println("	 $name: Depositing glass!")
						delay(7000) 
						 pos = "GB"  
						stateTimer = TimerActor("timer_depositGlass", 
							scope, context!!, "local_tout_transporttrolley_depositGlass", 100.toLong() )
					}
					 transition(edgeName="t25",targetState="goHome",cond=whenTimeout("local_tout_transporttrolley_depositGlass"))   
					transition(edgeName="t26",targetState="pickup",cond=whenRequest("pickupReq"))
				}	 
				state("goHome") { //this:State
					action { //it:State
						println("	 $name: Finished Deposit - Going home")
						delay(7000) 
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
