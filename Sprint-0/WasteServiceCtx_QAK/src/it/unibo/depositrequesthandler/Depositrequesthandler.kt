/* Generated by AN DISI Unibo */ 
package it.unibo.depositrequesthandler

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Depositrequesthandler ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var accepted = false; 
				val name = "RequestHandler"
				
				//Only one Request at time
				var ID = ""
				var T = ""
				var L = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("	 $name: Started!")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("	 $name: ready and waiting for deposit request...")
					}
					 transition(edgeName="t00",targetState="requestHandling",cond=whenRequest("wasteDeposit"))
				}	 
				state("requestHandling") { //this:State
					action { //it:State
						println("	 $name: Deposit Request arrived!")
						 accepted = false  
						if( checkMsgContent( Term.createTerm("wasteDeposit(ID,Type,TruckLoad)"), Term.createTerm("wasteDeposit(ID,T,L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	ID = payloadArg(0)
												T = payloadArg(1)
												L = payloadArg(2)
								println("Request: ($ID, $T, $L)")
								if(  ID.toInt()%2 == 0  
								 ){ accepted = true  
								}
								else
								 { accepted = false  
								 }
						}
					}
					 transition( edgeName="goto",targetState="requestAccepted", cond=doswitchGuarded({ accepted == true  
					}) )
					transition( edgeName="goto",targetState="requestRejected", cond=doswitchGuarded({! ( accepted == true  
					) }) )
				}	 
				state("requestAccepted") { //this:State
					action { //it:State
						answer("wasteDeposit", "loadaccept", "loadaccept($ID)"   )  
						println("	 $name: Request -$ID- Accepted!")
					}
					 transition( edgeName="goto",targetState="pickingUp", cond=doswitch() )
				}	 
				state("requestRejected") { //this:State
					action { //it:State
						answer("wasteDeposit", "loadrejecetd", "loadrejecetd($ID)"   )  
						println("	 $name: Request -$ID- Refused!")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("pickingUp") { //this:State
					action { //it:State
						println("	 $name: Requesting pickingUp...")
						request("pickupReq", "pickupReq($ID,$T)" ,"transporttrolley" )  
						forward("pickupOk", "pickupOk($ID)" ,"smartdevice" ) 
					}
					 transition(edgeName="t11",targetState="pickupOk",cond=whenReply("pickupOk"))
				}	 
				state("pickupOk") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickupOk(ID)"), Term.createTerm("pickupOk(ID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("	 $name: PickupOK received! Finished ${payloadArg(0)}")
								forward("pickupOk", "pickupOk($ID)" ,"smartdevice" ) 
						}
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
