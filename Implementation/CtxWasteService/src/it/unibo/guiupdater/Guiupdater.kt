/* Generated by AN DISI Unibo */ 
package it.unibo.guiupdater

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import org.json.simple.JSONObject

class Guiupdater ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				var robotState = ""
				var robotPos = ""
				var ledState = ""
				var currentGB = ""
				var currentPB = ""
				
				var Value = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						delay(3000) 
						CoapObserverSupport(myself, "localhost","8072","ctxwasteservice","wasteservice")
						CoapObserverSupport(myself, "localhost","8072","ctxwasteservice","transporttrolley")
						CoapObserverSupport(myself, "localhost","8072","ctxwasteservice","custompathexecutor")
						CoapObserverSupport(myself, "127.0.0.1","8076","ctxraspberry","led")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="handleCoapUpdate", cond=doswitch() )
				}	 
				state("handleCoapUpdate") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("coapUpdate(RESOURCE,VALUE)"), Term.createTerm("coapUpdate(RESOURCE,VALUE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												if(payloadArg(1).contains("robotState")){
													Value = payloadArg(1).split("(")[1]
													robotState = Value.dropLast(1)
												}
												
												if(payloadArg(1).contains("robotPos")){
													Value = payloadArg(1).split("(")[1]
													robotPos = Value.dropLast(1)
													}
											
												if(payloadArg(1).contains("ledState")){
													Value = payloadArg(1).split("(")[1]
													ledState = Value.dropLast(1)
													}
													
												if(payloadArg(1).contains("current")){
													Value = payloadArg(1).split("(")[1]
													Value = Value.dropLast(1)
													currentPB = Value.split(",")[0]
													currentGB = Value.split(",")[1]
												}
													
												var jsonstring = JSONObject()
												jsonstring.put("robotState","$robotState")
												jsonstring.put("robotPos","$robotPos")
												jsonstring.put("ledState","$ledState")
												jsonstring.put("currentGB","$currentGB")
												jsonstring.put("currentPB","$currentPB")
												
								updateResourceRep( "guiupdate($robotState,$robotPos,$ledState,$currentGB,$currentPB)"  
								)
								updateResourceRep( "jsonupdate($jsonstring)"  
								)
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t026",targetState="handleCoapUpdate",cond=whenDispatch("coapUpdate"))
				}	 
			}
		}
}
