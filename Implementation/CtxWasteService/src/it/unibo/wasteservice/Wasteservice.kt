/* Generated by AN DISI Unibo */ 
package it.unibo.wasteservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		
				val name = "WasteService"
				val version = "0"
		
				//Only one Request at time
				var accepted = false;
				var ID = 0
				var Type = ""
				var TruckLoad = 0
				
				
				val MAXPB = 100;
				val MAXGB = 100;
				var CurrentPB = 0;
				var CurrentGB = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Started! $version")
						updateResourceRep( "started"  
						)
						
									CurrentPB = 0;
									CurrentGB = 0;
						CommUtils.outgreen("	 CurrentPB = $CurrentPB")
						CommUtils.outgreen("	 CurrentGB = $CurrentGB")
						updateResourceRep( "current($CurrentPB, $CurrentGB)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: ready and waiting for deposit request...")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="requestHandling",cond=whenRequest("depositRequest"))
				}	 
				state("requestHandling") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Deposit Request arrived!")
						 
									accepted = false 
									ID++	
						if( checkMsgContent( Term.createTerm("depositRequest(Type,TruckLoad)"), Term.createTerm("depositRequest(T,L)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												Type = payloadArg(0)
												TruckLoad = payloadArg(1).toInt()
								CommUtils.outgreen("Request: ($Type, $TruckLoad)")
								if(  Type == "plastic"  
								 ){if(  (CurrentPB + TruckLoad) < MAXPB  
								 ){ accepted = true  
								}
								}
								if(  Type == "glass"  
								 ){if(  (CurrentGB + TruckLoad) < MAXGB  
								 ){ accepted = true  
								}
								}
								if(  Type != "glass" && Type != "plastic"  
								 ){ accepted = false  
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="requestAccepted", cond=doswitchGuarded({ accepted == true  
					}) )
					transition( edgeName="goto",targetState="requestRejected", cond=doswitchGuarded({! ( accepted == true  
					) }) )
				}	 
				state("requestAccepted") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Request -$ID- Accepted!")
						if(  Type == "plastic"  
						 ){ CurrentPB += TruckLoad  
						}
						if(  Type == "glass"  
						 ){ CurrentGB += TruckLoad  
						}
						CommUtils.outgreen("	 CurrentPB = $CurrentPB")
						CommUtils.outgreen("	 CurrentGB = $CurrentGB")
						updateResourceRep( "current($CurrentPB, $CurrentGB)"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="pickingUp", cond=doswitch() )
				}	 
				state("requestRejected") { //this:State
					action { //it:State
						answer("depositRequest", "loadrejecetd", "loadrejecetd($ID)"   )  
						CommUtils.outgreen("	 $name: Request -$ID- Refused!")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("pickingUp") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Requesting Picking Up...")
						request("pickupReq", "pickupReq($ID,$Type)" ,"transporttrolley" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t11",targetState="pickupOk",cond=whenReply("pickupOk"))
				}	 
				state("pickupOk") { //this:State
					action { //it:State
						CommUtils.outgreen("	 $name: Pickup finished! Truck ($ID) can go away!")
						answer("depositRequest", "loadaccept", "loadaccept($ID)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
