System raspberry


	//TransportTrolley - Led
	Dispatch ledStateUpdate : state(STATE)			//LedOn, LedOff, LedBlink
	//Event robotStateEvent : robotStateEvent(STATE)		//STATE: athome, moving, stopped
	Dispatch simulatorstart     : simulator(V)  


	//SonarQak23
	Event sonardata : distance(D)   //emitted  by datacleaner
	
	//SonarQak23 userÃ  l'update Resource



Context ctxraspberry ip[host="localhost" port=8076]


//DATA SOURCES
//CodedQActor sonarsimulator  context ctxsonar className "rx.sonarSimulator"  
CodedQActor sonardatasource context ctxraspberry className "sensors.sonarHCSR04SupportActor"

//Filters
CodedQActor datalogger     context ctxraspberry className "rx.dataLogger"
CodedQActor datacleaner    context ctxraspberry className "rx.dataCleaner"
CodedQActor distancefilter context ctxraspberry className "rx.distanceFilter"



//---- Led
QActor led context ctxraspberry {
	[#
		val name = "LedActor"
		val version = "V1.0"

		var ledState = "LedOff"
		
		val runtime = Runtime.getRuntime()

		val rasp = true
		
	#]

	State s0 initial {
		println("\t $name: Started! $version") color red
		updateResource[# "started" #]
		updateResource [# "ledState($ledState)" #]
	}
	Goto handleLedStateUpdate


	State handleLedStateUpdate {
        onMsg(ledStateUpdate : state(STATE)){
        	[# ledState = payloadArg(0) #]
			println("\t $name: Led state - $ledState") color red
			updateResource [# "ledState($ledState)" #]
		}
		
		
        if[# ledState == "LedOff" && rasp #]{
            //Spegni
            [# runtime.exec("sudo bash led25GpioTurnOff.sh") #]
        }
        if[# ledState == "LedBlink" && rasp #]{
            //Accendi
            //println("Rasp Exec LedOff")
            [# runtime.exec("sudo bash /led25GpioTurnOn.sh") #]
            delay 100
            //Spegni
            [# runtime.exec("sudo bash /led25GpioTurnOff.sh") #]
        }
        if[# ledState == "LedOn" && rasp #]{
            //Accendi
            [# runtime.exec("sudo bash /led25GpioTurnOn.sh") #]
        }
	}
	Transition t0	whenTime 100 -> handleLedStateUpdate
					whenMsg ledStateUpdate -> handleLedStateUpdate

}





//----- SONAR
QActor sonar23 context ctxraspberry{ 
	

	State s0 initial{  
		println("sonar23 | start") 
		[# subscribeToLocalActor("distancefilter").subscribeToLocalActor("sonardatasource") #]
		forward sonardatasource -m simulatorstart : simulatorstart(qasource)
		updateResource[# "started" #]
	}
	Goto work
	 
	State work{
		//println("sonar23 | waits ... ") 		
		//updateResource [# "sonar23 waiting ..." #]
	}
	Transition t0 whenEvent sonardata -> handlesonardata
	
	State handlesonardata{
		
		onMsg(sonardata : distance(D)){
			[# val D = payloadArg(0) #]
			println("\t HandleSonarData($D) - updating sonardata($D)")
			updateResource [# "sonardata($D)" #]
		}
		
	}
	Goto work
	
}




