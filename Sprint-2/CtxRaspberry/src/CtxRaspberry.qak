System raspberry


//TransportTrolley - Led
Event robotStateEvent : robotStateEvent(STATE)		//STATE: athome, moving, stopped


	//SonarQak23
	Event sonardata : distance(D)   //emitted  by distancefilter
	Event obstacle  : obstacle(D)   //emitted as stream by distancefilter
	Dispatch coapUpdate: coapUpdate(RESOURCE, VALUE)
	Event alarm           : alarm(X)

	//SonarData Appl
	Event sonardataAppl : distance(D)   //emitted  by sonarqak23

	//Sonar - TransportTrolley
 	Dispatch alarm 		: 	alarm(ARG)
 	Dispatch alarmStop 	: 	alarmStop(ARG)




Context ctxwasteservice ip[host="127.0.0.1" port=8072]

Context ctxraspberry ip[host="localhost" port=8076]





CodedQActor sonar  context ctxraspberry className "sonarSimulator"           //IN LOCALE
    //CodedQActor sonar  context ctxraspberry className "sonarHCSR04Support23"   //SU RASP
//CodedQActor datalogger     context ctxraspberry className "rx.dataLogger"
CodedQActor datacleaner    context ctxraspberry className "rx.dataCleaner"
CodedQActor distancefilter context ctxraspberry className "rx.distanceFilter"



ExternalQActor transporttrolley context ctxwasteservice



//---- Led
QActor led context ctxraspberry {
	[#
		val name = "LedActor"
		val version = "V1.0"

		var ledState = "off"
		var robotState = "null"
	#]

	State s0 initial {
		println("\t $name: Started! $version") color red
	}
	Goto handleRobotStateEvent


	State handleRobotStateEvent {
        println("\t $name: Handling RobotState change!") color red
        
        onMsg(robotStateEvent : robotStateEvent(STATE)){
        	[# robotState = payloadArg(0) #]
        

	        //Handling example
	        if[# robotState == "athome" #]{
	            [# ledState = "LedOff" #]
	        }
	        if[# robotState == "moving" #]{
	            [# ledState = "LedBlink" #]
	        }
	        if[# robotState == "stopped" #]{
	            [# ledState = "LedOn" #]
	        }
	
			println("\t $name: Led state- $ledState") color red
		}
	}
	Transition t0	whenEvent robotStateEvent -> handleRobotStateEvent

}





//----- SONAR
QActor sonar23 context ctxraspberry{ 
	[# var  ApplAlso = sysUtil.getActor("appl") != null #]
	State s0 initial{  
		println("sonar23 | start with appl: $ApplAlso") 
		[# subscribeToLocalActor("distancefilter").subscribeToLocalActor("datacleaner").subscribeToLocalActor("sonar") #]
	}
	Goto work
	 
	State work{
		//println("sonar23 | waits ... ") 		
		updateResource [# "sonar23 waiting ..." #]
	}
	Transition t0 whenEvent sonardata -> handlesonardata
	              whenEvent obstacle  -> handleobstacle
	
	State handlesonardata{
		printCurrentMessage
		updateResource [# "sonar23 handles $currentMsg" #]
		onMsg(sonardata : distance(D)){
			[# val D = payloadArg(0) #]
			emit sonardataAppl : distance($D)
		}
		
	}
	Goto work 
	
	State handleobstacle{
		onMsg( obstacle : obstacle(D)){			
			println("$name handleobstacle ALARM ${payloadArg(0)}") color magenta
			emit alarm : alarm(obstacle)			
		}
		
	}
	Goto sonar23 if [# ApplAlso == true #]  else work  
	
	State sonar23{
		println("$name BYE")
	}
}   

//SonarDataHandler
QActor sonardatahandler context ctxraspberry{
	[# 
		val DLIMIT = 10
		var stopped = false
	#]
	
	State s0 initial {
		
	}
	Goto handleSonarData
	
	
	State handleSonarData{
		onMsg(sonardataAppl : distance(D)){
			[# val distance = payloadArg(0) #]
			
			if[# distance.toInt() <= DLIMIT && stopped == false #]{
				forward transporttrolley -m alarm : alarm(stop)
				println("\t $name: Sending toggleStop(stop)!")
			}
			
			if[# distance.toInt() > DLIMIT && stopped == true #]{
				forward transporttrolley -m alarmStop : alarmStop(resume)
				println("\t $name: Sending toggleStop(resume)!")
			}
			
			println("\t $name: Handling SonarData($distance) - Robot Stopped: $stopped")
		}
	}
	Transition t0	whenEvent sonardataAppl -> handleSonarData
	
}




