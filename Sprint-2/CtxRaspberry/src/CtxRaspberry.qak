System raspberry


//TransportTrolley - Led
Event robotStateEvent : robotStateEvent(STATE)		//STATE: athome, moving, stopped


	//SonarQak23
	Event sonardata : distance(D)   //emitted  by distancefilter
	Event obstacle  : obstacle(D)   //emitted as stream by distancefilter
	Dispatch coapUpdate : coapUpdate(RESOURCE, VALUE)
	Event alarm		: alarm(X)
	
	//SonarData Appl
	Event sonardataAppl : distance(D)   //emitted  by sonarqak23

	//Sonar - TransportTrolley
 	Dispatch alarm 		: 	alarm(ARG)
 	Dispatch alarmStop 	: 	alarmStop(ARG)




Context ctxwasteservice ip[host="127.0.0.1" port=8072]

Context ctxraspberry ip[host="localhost" port=8076]





CodedQActor sonar  context ctxraspberry className "sonarSimulator"           //IN LOCALE
    //CodedQActor sonar  context ctxraspberry className "sonarHCSR04Support23"   //SU RASP
//CodedQActor datalogger     context ctxraspberry className "rx.dataLogger"
CodedQActor datacleaner    context ctxraspberry className "rx.dataCleaner"
//CodedQActor distancefilter context ctxraspberry className "rx.distanceFilter"



//---- Led
QActor led context ctxraspberry {
	[#
		val name = "LedActor"
		val version = "V1.0"

		var ledState = "LedOff"
		var robotState = "athome"
		
		val runtime = Runtime.getRuntime()
		
	#]

	State s0 initial {
		println("\t $name: Started! $version") color red
	}
	Goto handleRobotStateEvent


	State handleRobotStateEvent {
		
        onMsg(robotStateEvent : robotStateEvent(STATE)){
        	println("\t $name: Handling RobotState change!") color red
        	[# robotState = payloadArg(0) #]
        	if[# robotState == "athome" #]{
        		[# ledState = "LedOff" #]
        	}
        	if[# robotState == "moving" #]{
        		[# ledState = "LedBlink" #]
        	}
        	if[# robotState == "stopped" #]{
        		[# ledState = "LedOn" #]
        	}
			println("\t $name: Led state - $ledState") color red
		}
		
		
        if[# ledState == "LedOff" #]{
            //Spegni
            [# runtime.exec("sudo bash led25GpioTurnOff.sh") #]
        }
        if[# ledState == "LedBlink" #]{
            //Accendi
            [# runtime.exec("sudo bash led25GpioTurnOn.sh") #]
            delay 100
            //Spegni
            [# runtime.exec("sudo bash led25GpioTurnOff.sh") #]
        }
        if[# ledState == "LedOn" #]{
            //Accendi
            [# runtime.exec("sudo bash led25GpioTurnOn.sh") #]
        }
	}
	Transition t0	whenTime 100 -> handleRobotStateEvent
					whenEvent robotStateEvent -> handleRobotStateEvent

}





//----- SONAR
QActor sonar23 context ctxraspberry{ 
	[# var  ApplAlso = sysUtil.getActor("appl") != null #]
	State s0 initial{  
		println("sonar23 | start with appl: $ApplAlso") 
		[# subscribeToLocalActor("datacleaner").subscribeToLocalActor("sonar") #]
	}
	Goto work
	 
	State work{
		//println("sonar23 | waits ... ") 		
		//updateResource [# "sonar23 waiting ..." #]
	}
	Transition t0 whenEvent sonardata -> handlesonardata
	              whenEvent obstacle  -> handleobstacle
	
	State handlesonardata{
		//printCurrentMessage
		updateResource [# "sonar23 handles $currentMsg" #]
		onMsg(sonardata : distance(D)){
			[# val D = payloadArg(0) #]
			println("\t HandleSonarData($D) - Emitting sonardataAppl($D)")
			emit sonardataAppl : distance($D)
		}
		
	}
	Goto work 
	
	State handleobstacle{
		onMsg( obstacle : obstacle(D)){			
			println("$name handleobstacle ALARM ${payloadArg(0)}") color magenta
			emit alarm : alarm(obstacle)			
		}
		
	}
	Goto sonar23 if [# ApplAlso == true #]  else work  
	
	State sonar23{
		println("$name BYE")
	}
}




